entity interrupt_controller is
	port(
		Clock : in std_ulogic;
      Reset : in std_ulogic;
		
		--input
		instruction : in std_logic_vector(0 to 15);
		Int_request : in std_ulogic_vector;  --# Controls used to activate new interrupts
		
		--output
	);
end entity;

architecture rtl of interrupt_controller is

-- Create an 8-bit interrupt controller
  signal int_mask, int_request, pending_int, current_int :
         std_ulogic_vector(7 downto 0);
begin

  -- Disable interrupts 5, 6, and 7
  int_mask <= (7 downto 5 => '0', others => '1');
  
  ic: interrupt_ctl
    port map (
      Clock => clock,
      Reset => reset,

      Int_mask    => int_mask,      -- Mask to enable/disable interrupts
      Int_request => int_request,   -- Interrupt sources
      Pending     => pending_int,   -- Current set of pending interrupts
      Current     => current_int,   -- Vector identifying which interrupt is active

      Interrupt     => interrupt,     -- Signal when an interrupt is pending
      Acknowledge   => interrupt_ack, -- Acknowledge the interrupt has been serviced
      Clear_pending => clear_pending  -- Optional control to clear all
    );

  -- Assemble interrupt sources into a request vector
  int_request <= (
    0 => source1, -- Highest priority
    1 => source2,
    2 => source3,
    3 => source4, -- Lowest priority
    others => '0'); -- The remaining sources are unused

end architecture;